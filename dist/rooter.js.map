{"version":3,"sources":["rooter.js"],"names":["modes","isValidMode","mode","includes","Rooter","options","Error","routes","window","history","pushState","routeHandler","bind","url","callback","push","filter","route","location","pathname","replace","href","match","path","dispatchEvent","Event","addEventListener","removeEventListener","pathName","currentPath","currentRoute","console","warn","module","exports"],"mappings":"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","file":"rooter.js","sourceRoot":"..","sourcesContent":["const modes = ['hash', 'history'];\n\nfunction isValidMode(mode) {\n  return !mode ? true : modes.includes(mode);\n}\n\nclass Rooter {\n  constructor(options = {}) {\n    if (!isValidMode(options.mode)) {\n      throw new Error('invalid mode, try history or hash');\n    }\n\n    this.routes = [];\n    this.mode = options.mode || (window.history.pushState ? 'history' : 'hash');\n    this.routeHandler = this.routeHandler.bind(this);\n\n    return this;\n  }\n\n  get(url, callback) {\n    if (typeof url !== 'string') {\n      throw new Error('url must be a string');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    this.routes.push({url, callback});\n\n    return this;\n  }\n\n  forget(url) {\n    this.routes = this.routes.filter(route => route.url !== url);\n\n    return this;\n  }\n\n  currentPath() {\n    return this.mode === 'history' ? window.location.pathname.replace(/\\?(.*)/, '')\n      : (window.location.href.match(/#(.*)/) || [])[0] || '/';\n  }\n\n  navigate(path) {\n    if (this.mode === 'history') {\n      window.history.pushState(null, null, path);\n      window.dispatchEvent(new Event('pushstate'));\n    } else {\n      window.location.href = window.location.href.replace(/#(.*)/gi, path);\n    }\n\n    return this;\n  }\n\n  bind() {\n    window.addEventListener('pushstate', this.routeHandler);\n    window.addEventListener('popstate', this.routeHandler);\n    this.routeHandler();\n\n    return this;\n  }\n\n  unbind() {\n    window.removeEventListener('pushstate', this.routeHandler);\n    window.removeEventListener('popstate', this.routeHandler);\n\n    return this;\n  }\n\n  routeHandler() {\n    const pathName = this.currentPath(),\n      [currentRoute] = this.routes.filter(route => route.url === pathName);\n\n     if (currentRoute) {\n      currentRoute.callback();\n    } else {\n      console.warn(`no handler specified for '${pathName}'`);\n    }\n  }\n}\n\nmodule.exports = Rooter;\n"]}